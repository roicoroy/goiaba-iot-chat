{"version":3,"sources":["app.js"],"names":["express","require","app","cors","randomColor","uuid","disable","get","req","res","sendFile","__dirname","server","use","listen","process","env","PORT","console","log","io","users","connnections","on","socket","push","color","username","data","id","v4","nickName","updateUsernames","sockets","emit","message","broadcast","user","undefined","i","length","filter","x","splice","indexOf"],"mappings":"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","sourcesContent":["const express = require('express');\nconst app = express();\nvar cors = require('cors');\nlet randomColor = require('randomcolor');\nconst uuid = require('uuid');\n\n//Disable x-powered-by header\napp.disable('x-powered-by')\n\n//middlewares\n// app.use(express.static('client'));\n\n//routes\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/client/index.html');\n});\n\n//Listen on port 5000\nserver = app.use(cors).listen(process.env.PORT || 5000, () => {\n    console.log('server running' + process.env.PORT);\n});\n\n//socket.io instantiation\nconst io = require(\"socket.io\")(server);\n\nlet users = [];\nlet connnections = [];\n\n//listen on every connection\nio.on('connection', (socket) => {\n    console.log('New user connected');\n    connnections.push(socket)\n    //initialize a random color for the socket\n    let color = randomColor();\n\n    socket.username = 'Anonymous';\n    socket.color = color;\n\n    //listen on change_username\n    socket.on('change_username', data => {\n        let id = uuid.v4(); // create a random id for the user\n        socket.id = id;\n        socket.username = data.nickName;\n        users.push({ id, username: socket.username, color: socket.color });\n        updateUsernames();\n    })\n\n    //update Usernames in the client\n    const updateUsernames = () => {\n        io.sockets.emit('get users', users)\n    }\n\n    //listen on new_message\n    socket.on('new_message', (data) => {\n        //broadcast the new message\n        io.sockets.emit('new_message', { message: data.message, username: socket.username, color: socket.color });\n    })\n\n    //listen on typing\n    socket.on('typing', data => {\n        socket.broadcast.emit('typing', { username: socket.username })\n    })\n\n    //Disconnect\n    socket.on('disconnect', data => {\n\n        if (!socket.username)\n            return;\n        //find the user and delete from the users list\n        let user = undefined;\n        for (let i = 0; i < users.length; i++) {\n            if (users[i].id === socket.id) {\n                user = users[i];\n                break;\n            }\n        }\n        users = users.filter(x => x !== user);\n        //Update the users list\n        updateUsernames();\n        connnections.splice(connnections.indexOf(socket), 1);\n    })\n})\n"],"file":"app.dev.js"}